{
  "TestCaseRuns": [
    {
      "TestStepRuns": [
        {
          "Id": "TS_001",
          "Description": "Open the Browser",
          "Success": true,
          "Model": {
            "Id": "TS_001",
            "Description": "Open the Browser",
            "ActionKeyword": "openBrowser"
          }
        },
        {
          "Id": "TS_002",
          "Description": "Navigate to URL",
          "Success": true,
          "Model": {
            "Id": "TS_002",
            "Description": "Navigate to URL",
            "ActionKeyword": "navigate"
          }
        },
        {
          "TemplateRun": {
            "TestStepRuns": [
              {
                "Error": {
                  "oledbErrors": [
                    {
                      "Message": "External table is not in the expected format.",
                      "NativeError": -328602519,
                      "Source": "Microsoft Access Database Engine",
                      "SQLState": "3274"
                    }
                  ],
                  "ClassName": "System.Data.OleDb.OleDbException",
                  "Message": "External table is not in the expected format.",
                  "Data": null,
                  "InnerException": null,
                  "HelpURL": null,
                  "StackTraceString": "   at System.Data.OleDb.OleDbConnectionInternal..ctor(OleDbConnectionString constr, OleDbConnection connection)\r\n   at System.Data.OleDb.OleDbConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionInternal.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)\r\n   at System.Data.OleDb.OleDbConnection.Open()\r\n   at BizAPP.Automation.Framework.DataSource.Loaders.ExcelDataLoader.CreateConnection[T](String connString, String dataSource)\r\n   at BizAPP.Automation.Framework.DataSource.Loaders.ExcelDataLoader.ReadMany[T](AutomationContainer context, String rootFolder, String qry, String connString, String dataSource, Object param)\r\n   at BizAPP.Automation.Framework.DataSource.Loaders.ItemRepositoryLoader`1.ReadFromManyFiles[T](AutomationContainer context, String rootFolder, String qry, String connString, String dataSource, Object param)\r\n   at BizAPP.Automation.Framework.DataSource.Loaders.ExcelObjectRepositoryLoader.ReadMany[T](AutomationContainer context, String rootFolder, String qry, String connString, String dataSource, Object param)\r\n   at BizAPP.Automation.Framework.DataSource.ExcelDataSource.GetItems[T](String id, String dataSource)\r\n   at BizAPP.Automation.Framework.Services.ObjectRepositoryService.LoadFromRepository()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at System.Lazy`1.get_Value()\r\n   at BizAPP.Automation.Framework.Execution.TestStepRunner.ExecuteStep(TestStep model, TestStepRun run, ITestNode node, TestDataMapping dataMapping, TestData data, String actionKeyword, AutomationService automationService)\r\n   at BizAPP.Automation.Framework.Execution.TestStepRunner.Execute(TestStep model, TestStepRun run, ITestNode node, TestDataMapping dataMapping, TestData data)\r\n   at BizAPP.Automation.Framework.Execution.TestCaseRunner.Execute(TestCase model, TestCaseRun run, ITestNode node, TestDataMapping dataMapping, TestData data)\r\n   at BizAPP.Automation.Framework.Execution.TestStepRunner.ExecuteTemplate(TestStepRun run, ITestNode node, TestDataMapping dataMapping, TestData data, String actionKeyword)\r\n   at BizAPP.Automation.Framework.Execution.TestStepRunner.Execute(TestStep model, TestStepRun run, ITestNode node, TestDataMapping dataMapping, TestData data)\r\n   at BizAPP.Automation.Framework.Execution.TestCaseRunner.Execute(TestCase model, TestCaseRun run, ITestNode node, TestDataMapping dataMapping, TestData data)\r\n   at BizAPP.Automation.Framework.Execution.TestModuleRunner.Execute(TestSuite model, TestSuiteRun run, ITestNode node, TestDataMapping dataMapping, TestData data)\r\n   at BizAPP.Automation.Framework.ExecutionEngine.RunModule(TestSuite module, TestSuiteRun existingRun, IDynamicContainer ctx, ReportService reportService, String browser)",
                  "RemoteStackTraceString": null,
                  "RemoteStackIndex": 0,
                  "ExceptionMethod": "1\n.ctor\nSystem.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\nSystem.Data.OleDb.OleDbConnectionInternal\nVoid .ctor(System.Data.OleDb.OleDbConnectionString, System.Data.OleDb.OleDbConnection)",
                  "HResult": -2147467259,
                  "Source": "Microsoft Access Database Engine",
                  "WatsonBuckets": null
                },
                "ScreenSnapshot": "",
                "Id": "TS_001",
                "Description": "Enter Email",
                "Model": {
                  "Id": "TS_001",
                  "Description": "Enter Email",
                  "PageObject": "Cart_Email_txtbox",
                  "ActionKeyword": "input"
                }
              }
            ],
            "AllResults": {},
            "Id": "CreateAccount",
            "Description": "Running template CreateAccount",
            "Model": {
              "Id": "CreateAccount",
              "TemplateId": "CreateAccount",
              "Description": "Running template CreateAccount",
              "IsTemplate": true
            }
          },
          "Id": "TS_003",
          "Description": "Enter Email",
          "Model": {
            "Id": "TS_003",
            "Description": "Enter Email",
            "PageObject": " ",
            "ActionKeyword": "CreateAccount"
          }
        }
      ],
      "AllResults": {},
      "Id": "VC_TestCaseID_1",
      "Description": "Purchasing a product with US contry as an Adult",
      "Model": {
        "Id": "VC_TestCaseID_1",
        "TemplateId": "PurchaseProductSuccessUSadult",
        "Description": "Purchasing a product with US contry as an Adult",
        "TestModuleId": "ViomeCart",
        "RunMode": true
      }
    }
  ],
  "Browser": "Chrome",
  "AllResults": {},
  "Id": "ViomeCart",
  "Description": "This Module Validates the Activity of Buying the Viome product ",
  "Model": {
    "Id": "ViomeCart",
    "Description": "This Module Validates the Activity of Buying the Viome product ",
    "RunMode": true
  }
}